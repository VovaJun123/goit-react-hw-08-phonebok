{"version":3,"file":"static/js/463.a57fea3c.chunk.js","mappings":"8OAEaA,EAAiB,SAAAC,GAAK,OAAIA,EAAMC,SAASC,KAAM,EAC/CC,EAAkB,SAAAH,GAAK,OAAIA,EAAMC,SAASG,SAAU,EACpDC,EAAc,SAAAL,GAAK,OAAIA,EAAMC,SAASK,KAAM,EAG5CC,GAAwBC,EAAAA,EAAAA,IACjC,CAACT,EAHuB,SAAAC,GAAK,OAAIA,EAAMC,SAASQ,MAAO,IAIvD,SAACR,EAAUQ,GACP,OAAOR,EAASQ,QAAO,SAAAC,GAAO,OAAIA,EAAQC,KAAKC,cAC1CC,SAASJ,EAAOG,cAAc,GACvC,I,mBCVSE,EAAOC,EAAAA,GAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,kLASjBC,EAAaH,EAAAA,GAAAA,OAAaI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,iF,SCL1BG,EAAU,SAAHC,GAAwC,IAADC,EAAAD,EAAjCE,KAAQZ,EAAIW,EAAJX,KAAMa,EAAMF,EAANE,OAAQC,EAAEH,EAAFG,GACtCC,GAAWC,EAAAA,EAAAA,MAMjB,OAAQC,EAAAA,EAAAA,MAACd,EAAI,CAAAe,SAAA,EACTD,EAAAA,EAAAA,MAAA,KAAAC,SAAA,CAAIlB,EAAK,MAAIa,MACbM,EAAAA,EAAAA,KAACZ,EAAU,CAACa,QAAS,kBANIC,EAMsBP,OAL/CC,GAASO,EAAAA,EAAAA,IAAcD,IADC,IAACA,CAMyB,EAACH,SAAC,aAE5D,ECZaK,EAAc,WACvB,IAAMC,GAAkBC,EAAAA,EAAAA,IAAY7B,GAGpC,OACIuB,EAAAA,EAAAA,KAAA,MAAAD,SACKM,EAAgBE,KAAI,SAAAC,GAAM,OACvBR,EAAAA,EAAAA,KAAA,MAAAD,UACIC,EAAAA,EAAAA,KAACV,EAAO,CAACG,KAAMe,KADVA,EAAOb,GAEX,KAIrB,E,oBChBac,EAAQxB,EAAAA,GAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,wGAOlBuB,EAAOzB,EAAAA,GAAAA,MAAYI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,0FAKnBwB,EAAS1B,EAAAA,GAAAA,OAAa2B,IAAAA,GAAAzB,EAAAA,EAAAA,GAAA,4BCN7B0B,EAAaC,EAAAA,KAAaC,MAAM,CAClClC,KAAMiC,EAAAA,KACDE,IAAI,EAAG,cACPC,QACG,yHACA,0IAEHC,SAAS,oBACdxB,OAAQoB,EAAAA,KACHG,QACG,6EACA,gGAEHC,SAAS,8BAGLC,EAAc,WACvB,IAAMvB,GAAWC,EAAAA,EAAAA,MACX1B,GAAWmC,EAAAA,EAAAA,IAAYrC,GAUvBmD,EAAmB,SAACC,GACtB,IAAQxC,EAAiBwC,EAAjBxC,KAAMa,EAAW2B,EAAX3B,QATW,SAACb,EAAMa,GAKhC,OAJwBvB,EAASmD,MAC7B,SAAA1C,GAAO,OAAIA,EAAQC,KAAKC,gBAAkBD,EAAKC,eAC3CF,EAAQc,SAAWA,CAAM,GAGrC,CAKQ6B,CAAqB1C,EAAMa,GAK/BE,GAAS4B,EAAAA,EAAAA,IAAW,CAAE3C,KAAAA,EAAMa,OAAAA,KAJxB+B,MAAM,qBAADC,OAAsB7C,EAAI,eAAA6C,OAAchC,EAAM,oBAK3D,EAEA,OACIM,EAAAA,EAAAA,KAAC2B,EAAAA,GAAM,CACHC,cAAe,CACX/C,KAAM,GACNa,OAAQ,IAEZmC,iBAAkBhB,EAClBiB,SAAU,SAACC,EAAQC,GACfZ,EAAiBW,GACjBC,EAAQC,WACZ,EAAElC,UAEFC,EAAAA,EAAAA,KAACkC,EAAAA,GAAI,CAAAnC,UACDD,EAAAA,EAAAA,MAACW,EAAK,CAAAV,SAAA,EACFC,EAAAA,EAAAA,KAAA,OAAAD,UACID,EAAAA,EAAAA,MAACY,EAAI,CAAAX,SAAA,CAAC,gBAEFC,EAAAA,EAAAA,KAACmC,EAAAA,GAAK,CAACxC,GAAG,YAAYd,KAAK,eAGnCmB,EAAAA,EAAAA,KAACoC,EAAAA,GAAY,CAACvD,KAAK,UACnBmB,EAAAA,EAAAA,KAAA,OAAAD,UACID,EAAAA,EAAAA,MAACY,EAAI,CAAAX,SAAA,CAAC,UAEFC,EAAAA,EAAAA,KAACmC,EAAAA,GAAK,CAACxC,GAAG,WAAW0C,KAAK,MAAMxD,KAAK,iBAG7CmB,EAAAA,EAAAA,KAACoC,EAAAA,GAAY,CAACvD,KAAK,YACnBmB,EAAAA,EAAAA,KAAA,OAAAD,UACIC,EAAAA,EAAAA,KAACW,EAAM,CAAC0B,KAAK,SAAQtC,SAAC,wBAM9C,EChFauC,EAAOrD,EAAAA,GAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,2E,UCOjBoD,EAAS,SAAHhD,GAAkC,IAA5BiD,EAAUjD,EAAViD,WACf5C,GADmCL,EAARkD,UAChB5C,EAAAA,EAAAA,OACX6C,EAAqB,SAACC,GACxB/C,GAASgD,EAAAA,EAAAA,IAAUD,GACvB,EAEA,OACI7C,EAAAA,EAAAA,MAACwC,EAAI,CAAAvC,SAAA,CAAC,UAEFC,EAAAA,EAAAA,KAAA,SACIqC,KAAK,OACLQ,MAAOL,EACPM,YAAY,OACZC,SAAU,SAAAC,GAAG,OAjBH,SAACA,EAAKP,GAC5BA,EAASO,EAAIC,OAAOJ,MACxB,CAeiCK,CAAkBF,EAAKN,EAAmB,MAI3E,ECxBaS,EAAYlE,EAAAA,GAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,6HC6BnC,EAtBe,WACX,IAAMS,GAAWC,EAAAA,EAAAA,MACXvB,GAAYgC,EAAAA,EAAAA,IAAYjC,GACxBG,GAAQ8B,EAAAA,EAAAA,IAAY/B,GAM1B,OAJA6E,EAAAA,EAAAA,YAAU,WACNxD,GAASyD,EAAAA,EAAAA,MACb,GAAG,CAACzD,KAGAE,EAAAA,EAAAA,MAACqD,EAAS,CAAApD,SAAA,CACLzB,IAAcE,IAASwB,EAAAA,EAAAA,KAAA,KAAAD,SAAG,2BAC1BvB,IAASwB,EAAAA,EAAAA,KAAA,KAAAD,SAAIvB,KACdwB,EAAAA,EAAAA,KAAA,MAAAD,SAAI,eACJC,EAAAA,EAAAA,KAACmB,EAAW,KACZnB,EAAAA,EAAAA,KAAA,MAAAD,SAAI,cACJC,EAAAA,EAAAA,KAACuC,EAAM,KACPvC,EAAAA,EAAAA,KAACI,EAAW,MAGxB,C","sources":["Redux/selectors.js","Components/Contact/Contact.styled.js","Components/Contact/Contact.jsx","Components/ContactsList/ContactsList.jsx","Components/ContactForm/ContactForm.styled.js","Components/ContactForm/ContactForm.jsx","Components/Filter/Filter.styled.js","Components/Filter/Filter.jsx","Components/App.styled.js","Pages/Contacts.js"],"sourcesContent":["import { createSelector } from \"@reduxjs/toolkit\";\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectFilter = state => state.contacts.filter;\n\nexport const selectVisibleContacts = createSelector(\n    [selectContacts, selectFilter],\n    (contacts, filter) => {\n        return contacts.filter(contact => contact.name.toLowerCase()\n            .includes(filter.toLowerCase()))\n    }\n)","import styled from \"styled-components\";\n\nexport const Item = styled.div`\n    display: flex;\n    justify-content: space-between;\n    gap: 20px;\n    align-items: center;\n    padding: 10px; \n    box-shadow: 0 0 5px rgba(0, 0, 0, 0.2);   \n`\n\nexport const Terminator = styled.button`\n   \n    width: 80px;\n    height: 25px;\n    text-align: center;    \n`","import React from \"react\";\nimport { Item, Terminator } from \"./Contact.styled\";\nimport { deleteContact } from '../../Redux/operations';\nimport { useDispatch } from 'react-redux';\n\n\nexport const Contact = ({ info: { name, number, id } }) => {\n    const dispatch = useDispatch();\n\n    const handleDeleteContact = (elementId) => {\n        dispatch(deleteContact(elementId));\n    }\n\n    return (<Item>\n        <p>{name} : {number}</p>\n        <Terminator onClick={() => handleDeleteContact(id)}>Delete</Terminator>\n    </Item>)\n}","import React from \"react\";\nimport { useSelector } from 'react-redux';\nimport { selectVisibleContacts } from '../../Redux/selectors'\nimport { Contact } from \"../Contact/Contact\";\n\nexport const ContactList = () => {\n    const visibleContacts = useSelector(selectVisibleContacts);\n\n\n    return (\n        <ul>\n            {visibleContacts.map(person => (\n                <li key={person.id}>\n                    <Contact info={person} />\n                </li>\n            ))}\n        </ul>\n    );\n};","import styled from \"styled-components\";\n\nexport const Forma = styled.div`\n    display: flex;\n    flex-direction: column;    \n    gap: 30px;\n    margin-left: 40px; \n`\n\nexport const Pole = styled.label`\n    display: flex;\n    justify-content: space-between;\n    gap: 20px;       \n`\nexport const AddBTN = styled.button`\n    width: 100%;\n`","import React from \"react\";\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { Forma, Pole, AddBTN } from \"./ContactForm.styled\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { addContact } from '../../Redux/operations';\nimport { selectContacts } from \"Redux/selectors\";\n\nconst FormSchema = Yup.object().shape({\n    name: Yup.string()\n        .min(3, 'Too Short!')\n        .matches(\n            /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n            \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        )\n        .required('Name is required'),\n    number: Yup.string()\n        .matches(\n            /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n            'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n        )\n        .required('Phone number is required'),\n})\n\nexport const ContactForm = () => {\n    const dispatch = useDispatch();\n    const contacts = useSelector(selectContacts);\n\n    const checkIfContactExists = (name, number) => {\n        const existingContact = contacts.find(\n            contact => contact.name.toLowerCase() === name.toLowerCase() ||\n                contact.number === number\n        );\n        return existingContact;\n    }\n\n    const handleAddContact = (newContact) => {\n        const { name, number } = newContact;\n\n        if (checkIfContactExists(name, number)) {\n            alert(`Contact with name ${name} or number ${number} already exists!`);\n            return;\n        }\n\n        dispatch(addContact({ name, number }));\n    }\n\n    return (\n        <Formik\n            initialValues={{\n                name: '',\n                number: ''\n            }}\n            validationSchema={FormSchema}\n            onSubmit={(values, actions) => {\n                handleAddContact(values);\n                actions.resetForm();\n            }}\n        >\n            <Form>\n                <Forma>\n                    <div>\n                        <Pole>\n                            Contact name\n                            <Field id=\"firstName\" name=\"name\" />\n                        </Pole>\n                    </div>\n                    <ErrorMessage name=\"name\" />\n                    <div>\n                        <Pole>\n                            Number\n                            <Field id=\"lastName\" type=\"tel\" name=\"number\" />\n                        </Pole>\n                    </div>\n                    <ErrorMessage name=\"number\" />\n                    <div>\n                        <AddBTN type=\"submit\">Add contact</AddBTN>\n                    </div>\n                </Forma>\n            </Form>\n        </Formik>\n    )\n}","import styled from \"styled-components\";\n\nexport const Filt = styled.div`\n    display: flex;\n    gap: 20px;\n    margin-left: 40px;     \n`","import React from \"react\";\nimport { Filt } from \"./Filter.styled\";\nimport { useDispatch } from 'react-redux';\nimport { setFilter } from '../../Redux/contactsSlice';\n\nconst handleInputChange = (evt, toSearch) => {\n    toSearch(evt.target.value);\n}\n\nexport const Filter = ({ filterName, toSearch }) => {\n    const dispatch = useDispatch();\n    const handleFilterChange = (newFilter) => {\n        dispatch(setFilter(newFilter));\n    }\n\n    return (\n        <Filt>\n            Filter\n            <input\n                type=\"text\"\n                value={filterName}\n                placeholder=\"name\"\n                onChange={evt => handleInputChange(evt, handleFilterChange)}\n            />\n        </Filt>\n    );\n}","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin: 20px auto;  \n  padding: 20px;\n  \n`;","import { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchContacts } from \"../Redux/operations\";\nimport { selectIsLoading, selectError } from \"../Redux/selectors\";\nimport { ContactList } from \"Components/ContactsList/ContactsList\";\nimport { ContactForm } from \"Components/ContactForm/ContactForm\";\nimport { Filter } from \"Components/Filter/Filter\";\nimport { Container } from 'Components/App.styled'\n\nconst Phones = () => {\n    const dispatch = useDispatch();\n    const isLoading = useSelector(selectIsLoading);\n    const error = useSelector(selectError);\n\n    useEffect(() => {\n        dispatch(fetchContacts());\n    }, [dispatch]);\n\n    return (\n        <Container>\n            {isLoading && !error && <b>Request in progress...</b>}\n            {error && <p>{error}</p>}\n            <h1>Phonebook</h1>\n            <ContactForm />\n            <h2>Contacts</h2>\n            <Filter />\n            <ContactList />\n        </Container>\n    )\n};\n\nexport default Phones;"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectVisibleContacts","createSelector","filter","contact","name","toLowerCase","includes","Item","styled","_templateObject","_taggedTemplateLiteral","Terminator","_templateObject2","Contact","_ref","_ref$info","info","number","id","dispatch","useDispatch","_jsxs","children","_jsx","onClick","elementId","deleteContact","ContactList","visibleContacts","useSelector","map","person","Forma","Pole","AddBTN","_templateObject3","FormSchema","Yup","shape","min","matches","required","ContactForm","handleAddContact","newContact","find","checkIfContactExists","addContact","alert","concat","Formik","initialValues","validationSchema","onSubmit","values","actions","resetForm","Form","Field","ErrorMessage","type","Filt","Filter","filterName","toSearch","handleFilterChange","newFilter","setFilter","value","placeholder","onChange","evt","target","handleInputChange","Container","useEffect","fetchContacts"],"sourceRoot":""}